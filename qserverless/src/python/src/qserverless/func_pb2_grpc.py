# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import qserverless.func_pb2 as func__pb2


class BlobServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamProcess = channel.stream_stream(
                '/func.BlobService/StreamProcess',
                request_serializer=func__pb2.BlobSvcReq.SerializeToString,
                response_deserializer=func__pb2.BlobSvcResp.FromString,
                )


class BlobServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StreamProcess(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BlobServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamProcess': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamProcess,
                    request_deserializer=func__pb2.BlobSvcReq.FromString,
                    response_serializer=func__pb2.BlobSvcResp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'func.BlobService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BlobService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StreamProcess(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/func.BlobService/StreamProcess',
            func__pb2.BlobSvcReq.SerializeToString,
            func__pb2.BlobSvcResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class FuncAgentServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamProcess = channel.stream_stream(
                '/func.FuncAgentService/StreamProcess',
                request_serializer=func__pb2.FuncAgentMsg.SerializeToString,
                response_deserializer=func__pb2.FuncAgentMsg.FromString,
                )
        self.FuncCall = channel.unary_unary(
                '/func.FuncAgentService/FuncCall',
                request_serializer=func__pb2.FuncAgentCallReq.SerializeToString,
                response_deserializer=func__pb2.FuncAgentCallResp.FromString,
                )


class FuncAgentServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StreamProcess(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FuncCall(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FuncAgentServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamProcess': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamProcess,
                    request_deserializer=func__pb2.FuncAgentMsg.FromString,
                    response_serializer=func__pb2.FuncAgentMsg.SerializeToString,
            ),
            'FuncCall': grpc.unary_unary_rpc_method_handler(
                    servicer.FuncCall,
                    request_deserializer=func__pb2.FuncAgentCallReq.FromString,
                    response_serializer=func__pb2.FuncAgentCallResp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'func.FuncAgentService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FuncAgentService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StreamProcess(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/func.FuncAgentService/StreamProcess',
            func__pb2.FuncAgentMsg.SerializeToString,
            func__pb2.FuncAgentMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FuncCall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/func.FuncAgentService/FuncCall',
            func__pb2.FuncAgentCallReq.SerializeToString,
            func__pb2.FuncAgentCallResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class FuncSvcServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamProcess = channel.stream_stream(
                '/func.FuncSvcService/StreamProcess',
                request_serializer=func__pb2.FuncSvcMsg.SerializeToString,
                response_deserializer=func__pb2.FuncSvcMsg.FromString,
                )


class FuncSvcServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StreamProcess(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FuncSvcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamProcess': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamProcess,
                    request_deserializer=func__pb2.FuncSvcMsg.FromString,
                    response_serializer=func__pb2.FuncSvcMsg.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'func.FuncSvcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FuncSvcService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StreamProcess(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/func.FuncSvcService/StreamProcess',
            func__pb2.FuncSvcMsg.SerializeToString,
            func__pb2.FuncSvcMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
