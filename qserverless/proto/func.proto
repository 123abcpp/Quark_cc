// Copyright (c) 2021 Quark Container Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package func;

service FuncAgentService {
  rpc StreamProcess(stream FuncAgentMsg) returns (stream FuncAgentMsg);
}

message FuncAgentMsg {
  uint64 msgId = 1;
  oneof EventBody {
    FuncPodRegisterReq FuncPodRegisterReq = 100;
    FuncPodRegisterResp FuncPodRegisterResp = 200;
    FuncAgentCallReq FuncAgentCallReq = 300;
    FuncAgentCallResp FuncAgentCallResp = 400;
  }
}

message FuncPodRegisterReq {
  string instanceId = 1;
}

message FuncPodRegisterResp {
    string error = 1;
}

message FuncAgentCallReq {
  string funcName = 1;
  string parameters = 2;
}

message FuncAgentCallResp {
    string error = 1;
    string resp = 2;
}

service FuncSvcService {
  rpc StreamProcess(stream FuncSvcMsg) returns (stream FuncSvcMsg);
}

message FuncSvcMsg {
  uint64 msgId = 1;
  oneof EventBody {
    FuncAgentRegisterReq FuncAgentRegisterReq = 100;
    FuncAgentRegisterResp FuncAgentRegisterResp = 200;
    FuncPodConnReq FuncPodConnReq = 300;
    FuncPodConnResp FuncPodConnResp = 400;
    FuncPodDisconnReq FuncPodDisconnReq = 500;
    FuncPodDisconnResp FuncPodDisconnResp = 600;
    FuncSvcCallReq FuncSvcCallReq = 700;
    FuncSvcCallResp FuncSvcCallResp = 800;
  }
}

message FuncAgentRegisterReq {
  string nodeId = 1;
  repeated FuncSvcCallReq funcCalls = 2; // func calls waiting for response
  repeated FuncPodStatus funcPods = 3; // func pods running on the node
}

message FuncAgentRegisterResp {
    string error = 1;
}

message FuncPodConnReq {
  string nodeId = 1;
}

message FuncPodConnResp {
    string error = 1;
}

message FuncPodDisconnReq {
  string podId = 1;
}

message FuncPodDisconnResp {
    string error = 1;
}

message FuncSvcCallReq {
  string funcId = 1;
  string namespace = 2;
  string package = 3;
  string funcName = 4;
  string parameters = 5;
  string calleeNodeId = 6; // when funcCall is process by a funcPod, this is the NodeId
}

message FuncSvcCallResp {
    string error = 1;
    string resp = 2;
}

enum FuncPodState {
  Creating = 0;
  Keepalive = 2;
  Running = 3;
}

message FuncPodStatus {
    string podId = 1;
    string packageId = 2;
    FuncPodState state = 3;
    string funcCallId = 4;        // when pod is running, the funccall id
    string funcCallerNodeId = 5; //  when pod is running, the funccall caller id
}

