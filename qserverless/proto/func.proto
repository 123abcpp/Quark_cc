// Copyright (c) 2021 Quark Container Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package func;

service BlobService {
  rpc StreamProcess(stream BlobSvcReq) returns (stream BlobSvcResp);
}

message BlobSvcReq {
  uint64 msgId = 1;
  oneof EventBody {
    BlobOpenReq BlobOpenReq = 501;
    BlobReadReq BlobReadReq = 505;
    BlobSeekReq BlobSeekReq = 507;
    BlobCloseReq BlobCloseReq = 513;
  }
}

message BlobSvcResp {
  uint64 msgId = 1;
  oneof EventBody {
    BlobOpenResp BlobOpenResp = 502;
    BlobReadResp BlobReadResp = 506;
    BlobSeekResp BlobSeekResp= 508;
    BlobCloseResp BlobCloseResp = 514;
  }
}

service FuncAgentService {
  rpc StreamProcess(stream FuncAgentMsg) returns (stream FuncAgentMsg);
  rpc FuncCall(FuncAgentCallReq) returns (FuncAgentCallResp);
}

message FuncAgentMsg {
  oneof EventBody {
    FuncPodRegisterReq FuncPodRegisterReq = 100;
    FuncPodRegisterResp FuncPodRegisterResp = 200;
    FuncAgentCallReq FuncAgentCallReq = 300;
    FuncAgentCallResp FuncAgentCallResp = 400;
    BlobOpenReq BlobOpenReq = 501;
    BlobOpenResp BlobOpenResp = 502;
    BlobCreateReq BlobCreateReq = 503;
    BlobCreateResp BlobCreateResp = 504;
    BlobReadReq BlobReadReq = 505;
    BlobReadResp BlobReadResp = 506;
    BlobSeekReq BlobSeekReq = 507;
    BlobSeekResp BlobSeekResp= 508;
    BlobWriteReq BlobWriteReq = 509;
    BlobWriteResp BlobWriteResp = 510;
    BlobSealReq BlobSealReq = 511;
    BlobSealResp BlobSealResp = 512;
    BlobCloseReq BlobCloseReq = 513; 
    BlobCloseResp BlobCloseResp = 514;
  }
}

message BlobOpenReq {
  uint64 msgId = 1;
  string svcAddr = 2;
  string namespace = 3;
  string name = 4;
}

message BlobOpenResp {
  uint64 msgId = 1;
  uint64 id = 2;
  string namespace = 3;
  string name = 4;
  uint64 size = 5;
  string checksum = 6;
  Timestamp createTime = 7;
  Timestamp lastAccessTime = 8;
  string error = 9;
}

message BlobCreateReq {
  uint64 msgId = 1;
  string svcAddr = 2;
  string namespace = 3;
  string name = 4;
}

message BlobCreateResp {
  uint64 msgId = 1;
  uint64 id = 2;
  string error = 9;
}

message BlobReadReq {
  uint64 msgId = 1;
  uint64 id = 2;
  uint64 len = 3;
}

message BlobReadResp {
  uint64 msgId = 1;
  bytes data = 3;
  string error = 4;
}

message BlobSeekReq {
  uint64 msgId = 1;
  uint64 id = 2;
  int64 pos = 3;
  uint32 seekType = 4;
}

message BlobSeekResp {
  uint64 msgId = 1;
  uint64 offset = 2;
  string error = 3;
}

message BlobCloseReq {
  uint64 msgId = 1;
  uint64 id = 2;
}

message BlobCloseResp {
  uint64 msgId = 1;
  string error = 2;
}

message BlobWriteReq {
  uint64 msgId = 1;
  uint64 id = 2;
  bytes data = 3;
}

message BlobWriteResp {
  uint64 msgId = 1;
  string error = 2;
}

message BlobSealReq {
  uint64 msgId = 1;
  uint64 id = 2;
}

message BlobSealResp {
  uint64 msgId = 1;
  string error = 2;
}

message FuncPodRegisterReq {
  string funcPodId = 1;
  string namespace = 2;
  string packageName = 3;
}

message FuncPodRegisterResp {
    string error = 1;
}

message FuncAgentCallReq {
  string id = 1;
  string namespace = 2;
  string packageName = 3;
  string funcName = 4;
  string parameters = 5;
  uint64 priority = 6;
}

message FuncAgentCallResp {
  string id = 1;
  string error = 2;
  string resp = 3;
}

service FuncSvcService {
  rpc StreamProcess(stream FuncSvcMsg) returns (stream FuncSvcMsg);
}

message FuncSvcMsg {
  oneof EventBody {
    FuncAgentRegisterReq FuncAgentRegisterReq = 100;
    FuncAgentRegisterResp FuncAgentRegisterResp = 200;
    FuncPodConnReq FuncPodConnReq = 300;
    FuncPodConnResp FuncPodConnResp = 400;
    FuncPodDisconnReq FuncPodDisconnReq = 500;
    FuncPodDisconnResp FuncPodDisconnResp = 600;
    FuncSvcCallReq FuncSvcCallReq = 700;
    FuncSvcCallResp FuncSvcCallResp = 800;
  }
}

message FuncAgentRegisterReq {
  string nodeId = 1;
  repeated FuncSvcCallReq callerCalls = 2; // func calls from the node
  repeated FuncSvcCallReq calleeCalls = 3; // func calls processing in the node
  repeated FuncPodStatus funcPods = 4; // func pods running on the node
}

message FuncAgentRegisterResp {
    string error = 1;
}

message FuncPodConnReq {
  string funcPodId = 2;
  string namespace = 3;
  string packageName = 4;
}

message FuncPodConnResp {
  string funcPodId = 1;
  string error = 2;
}

message FuncPodDisconnReq {
  string funcPodId = 1;
}

message FuncPodDisconnResp {
    string error = 1;
}

message FuncSvcCallReq {
  string id = 1;
  string namespace = 2;
  string packageName = 3;
  string funcName = 4;
  string parameters = 5;
  uint64 priority = 6;
  Timestamp createtime = 7;

  string callerNodeId = 8;
  string callerPodId = 9; 

  string calleeNodeId = 10; // when funcCall is process by a funcPod, this is the NodeId
  string calleePodId = 11;

}

message FuncSvcCallResp {
  string id = 1;
  string error = 2;
  string resp = 3;
  
  string callerNodeId = 8;
  string callerPodId = 9; 

  string calleeNodeId = 10; // when funcCall is process by a funcPod, this is the NodeId
  string calleePodId = 11;
}

enum FuncPodState {
  Idle = 0;
  Running = 1;
}

message FuncPodStatus {
    string funcPodId = 1;
    string namespace = 2;
    string packageName = 3;
    FuncPodState state = 4;
    string funcCallId = 5; // when the pod is running the funcCallId
}

message Timestamp {
  uint64 seconds = 1;
  uint32 nanos = 2;
}